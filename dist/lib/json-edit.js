"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_slicedToArray=function(){function e(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var l,a=e[Symbol.iterator]();!(r=(l=a.next()).done)&&(n.push(l.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,t){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.JsonEdit=t()}(window,function(){function e(e){switch(l.call(e).toLowerCase()){case"[object object]":return"object";case"[object array]":return"array";case"[object null]":return"null";case"[object string]":return"string";case"[object number]":return"number";case"[object boolean]":return e?"true":"false"}return""}function t(e,t,n,r){var i={type:e,id:a++};return"#"==n?(i.isRoot="the-root",i.key="root",i.keyDis="disabled"):n&&(i.key=n),i[e+"Type"]="selected",i.child=r,["number","string"].indexOf(e)>=0&&(i.value=t),"object"==e&&(i.isKey="the-key"),c.replace(/\{\#(\w+)\}/g,function(e,t){var n=i[t];return void 0===n?"":n})}function n(r,i){var o=e(r);if(""==o)return"";if("object"==o){var l=[];for(var a in r)l.push(n(r[a],a));return t(o,r,i,l.join(""))}if("array"==o){for(var c=[],u=0;u<r.length;u+=1)c.push(n(r[u]));return t(o,r,i,c.join(""))}return t(o,r,i,"")}function r(e,t){return u.innerHTML=n(e,t),u.firstChild}function i(e){for(var t="lje"+e.getAttribute("key"),n=e.querySelectorAll("["+t+"]"),r={$:e},i=0;i<n.length;i+=1){var o=n[i],l=o.getAttribute(t);l&&(r[l]=o)}return r}function o(e){var t=i(e),n=t.sel.value;if("object"==n){var r={};return t.child.childNodes.forEach(function(e){if(1==e.nodeType){var t=o(e),n=_slicedToArray(t,2),i=n[0],l=n[1];l&&(r[l]=i)}}),[r,t.key.value.trim()]}if("array"==n){var l=[];return t.child.childNodes.forEach(function(e){if(1==e.nodeType){var t=o(e),n=_slicedToArray(t,1),r=n[0];l.push(r)}}),[l,t.key.value.trim()]}return"null"==n?[null,t.key.value.trim()]:"false"==n?[!1,t.key.value.trim()]:"true"==n?[!0,t.key.value.trim()]:"string"==n?[t.val.value.trim(),t.key.value.trim()]:"number"==n?[Number(t.val.value.replace(/\W+/g,""))||0,t.key.value.trim()]:[void 0,""]}var l=Object.prototype.toString,a=10,c='<div class="lje-line {#isRoot}" key="{#id}">\n                        <div class="lje-cols sub-type-{#type}" lje{#id}="cols">\n                            <div class="lje-col sub-key">\n                                <div class="lje-ipt">\n                                    <input type="text" lje{#id}="key" {#keyDis} value="{#key}" />\n                                </div>\n                            </div>\n                            <div class="lje-col sub-icon sub-is">\n                                <div class="lje-is">:</div>\n                            </div>\n                            <div class="lje-col sub-select">\n                                <div class="lje-select">\n                                    <span class="select-c">\n                                        <select lje{#id}="sel">\n                                            <option value="string" {#stringType}>string</option>\n                                            <option value="number" {#numberType}>number</option>\n                                            <option value="object" {#objectType}>object</option>\n                                            <option value="array" {#arrayType}>array</option>\n                                            <option value="null" {#nullType}>null</option>\n                                            <option value="true" {#trueType}>true</option>\n                                            <option value="false" {#falseType}>false</option>\n                                        </select>\n                                    </span>\n                                </div>\n                            </div>\n                            <div class="lje-col sub-full">\n                                <div class="lje-ipt">\n                                    <input type="text" lje{#id}="val" value="{#value}" />\n                                </div>\n                            </div>\n                            <div class="lje-col sub-icon sub-add">\n                                <div class="lje-add" lje-click="add"></div>\n                            </div>\n                            <div class="lje-col sub-icon sub-remove">\n                                <div class="lje-remove" lje-click="remove"></div>\n                            </div>\n                        </div>\n                        <div class="lje-child {#isKey}" lje{#id}="child">{#child}</div>\n                    </div>'.replace(/>\s+</g,"><"),u=document.createElement("div"),s={change:function(e,t){var n=i(e);if(n.cols.className="lje-cols sub-type-"+t,n.child.className="lje-child"+("object"==t?" the-key":""),"number"==t)return void(n.val.value=n.val.value.replace(/\D/g,"")||0);["object","array"].indexOf(t)<0&&(n.child.innerHTML="")},add:function(e){var t=i(e),n=r("");t.child.appendChild(n)},remove:function(e){e.parentNode.removeChild(e)}};return function(){function e(t){_classCallCheck(this,e),this.$="string"==typeof t?document.getElementById(t):t,this.$.onchange=function(e){var t=e.target;if("select"==t.tagName.toLowerCase()){var n=t.value;s.change(t.parentNode.parentNode.parentNode.parentNode.parentNode,n)}},this.$.onclick=function(e){var t=e.target,n=s[t.getAttribute("lje-click")];n&&n(t.parentNode.parentNode.parentNode)}}return _createClass(e,[{key:"renderByData",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.$.innerHTML='<div class="locus-json-edit">'+n(e,"#")+"</div>",this.key=a-1}},{key:"getData",value:function(){return o(this.$.querySelector('[key="'+this.key+'"]'))[0]}}]),e}()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9qc29uLWVkaXQuanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsImV4cG9ydHMiLCJfdHlwZW9mIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwid2luZG93IiwiZ2V0VmFsdWVUeXBlIiwidmFsdWUiLCJjYWxsIiwidG9Mb3dlckNhc2UiLCJKc29uRWRpdCIsInRvU3RyaW5nIiwiT2JqZWN0IiwidHlwZSIsImdldEhUTUxCeURhdGEiLCJrZXkiLCJjaGlsZCIsIm9iaiIsImlkIiwia2V5SW5kZXgiLCJkb21DYWNoZSIsInB1c2giLCJnZXRMaW5lU3RyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiczAiLCJzMSIsImdldERvbUJ5RGF0YSIsInVuZGVmaW5lZCIsImlubmVySFRNTCIsImxpbmUiLCJnZXRBdHRyaWJ1dGUiLCJkb21zIiwicXVlcnlTZWxlY3RvckFsbCIsIiQiLCJkb20iLCJuIiwiam9pbiIsImdldERhdGFCeUxpbmUiLCJnZXREb21CeUxKRSIsImkiLCJsZW5ndGgiLCJzZWwiLCJ2YWwiLCJmaXJzdENoaWxkIiwiYXJyIiwiZG9tT2JqIiwiY2hpbGROb2RlcyIsImZvckVhY2giLCJpdGVtIiwibm9kZVR5cGUiLCJ0cmltIiwidiIsImsiLCJldmVudHMiLCJjb2xzIiwiY2xhc3NOYW1lIiwiX2dldERhdGFCeUxpbmUzIiwiX2dldERhdGFCeUxpbmU0IiwiX3NsaWNlZFRvQXJyYXkiLCJpbmRleE9mIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidGFyZ2V0IiwiZXZlbnQiLCJOdW1iZXIiLCJyZXBsYWNlIiwicHJvdG90eXBlIiwibGluZVN0cmluZyIsImZuIiwiY2hhbmdlIiwianNvbiIsImFkZCIsInRoZU5ldyIsImFwcGVuZENoaWxkIiwicmVtb3ZlIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsImdldEVsZW1lbnRCeUlkIiwib25jaGFuZ2UiLCJ0YWdOYW1lIiwib25jbGljayIsImFyZ3VtZW50cyIsInF1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LCJmaWxlIjoibGliL2pzb24tZWRpdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihnbG9iYWwsIGZhY3RvcnkpIHtcclxuICAgIC8vIFVNRCDliqDovb3mlrnmoYhcclxuICAgIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgICAgZGVmaW5lKGZhY3RvcnkpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGdsb2JhbC5Kc29uRWRpdCA9IGZhY3RvcnkoKTtcclxufSkod2luZG93LCBmdW5jdGlvbigpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgbGV0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcclxuICAgIC8vIOexu+Wei+WIpOaWrVxyXG4gICAgZnVuY3Rpb24gZ2V0VmFsdWVUeXBlKHZhbHVlKSB7XHJcbiAgICAgICAgbGV0IHR5cGUgPSB0b1N0cmluZy5jYWxsKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiW29iamVjdCBvYmplY3RdXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJvYmplY3RcIjtcclxuICAgICAgICAgICAgY2FzZSBcIltvYmplY3QgYXJyYXldXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJhcnJheVwiO1xyXG4gICAgICAgICAgICBjYXNlIFwiW29iamVjdCBudWxsXVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibnVsbFwiO1xyXG4gICAgICAgICAgICBjYXNlIFwiW29iamVjdCBzdHJpbmddXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIjtcclxuICAgICAgICAgICAgY2FzZSBcIltvYmplY3QgbnVtYmVyXVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibnVtYmVyXCI7XHJcbiAgICAgICAgICAgIGNhc2UgXCJbb2JqZWN0IGJvb2xlYW5dXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPyBcInRydWVcIiA6IFwiZmFsc2VcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g55Sf5oiQ5ZSv5LiA55qE5pWw5a2XXHJcbiAgICBsZXQga2V5SW5kZXggPSAxMDtcclxuICAgIC8vIOayoeS4gOihjOeahGh0bWznu5PmnoRcclxuICAgIGxldCBsaW5lU3RyaW5nID0gYDxkaXYgY2xhc3M9XCJsamUtbGluZSB7I2lzUm9vdH1cIiBrZXk9XCJ7I2lkfVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGplLWNvbHMgc3ViLXR5cGUteyN0eXBlfVwiIGxqZXsjaWR9PVwiY29sc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxqZS1jb2wgc3ViLWtleVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsamUtaXB0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGxqZXsjaWR9PVwia2V5XCIgeyNrZXlEaXN9IHZhbHVlPVwieyNrZXl9XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxqZS1jb2wgc3ViLWljb24gc3ViLWlzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxqZS1pc1wiPjo8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxqZS1jb2wgc3ViLXNlbGVjdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsamUtc2VsZWN0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2VsZWN0LWNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbGpleyNpZH09XCJzZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwic3RyaW5nXCIgeyNzdHJpbmdUeXBlfT5zdHJpbmc8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibnVtYmVyXCIgeyNudW1iZXJUeXBlfT5udW1iZXI8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwib2JqZWN0XCIgeyNvYmplY3RUeXBlfT5vYmplY3Q8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiYXJyYXlcIiB7I2FycmF5VHlwZX0+YXJyYXk8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibnVsbFwiIHsjbnVsbFR5cGV9Pm51bGw8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwidHJ1ZVwiIHsjdHJ1ZVR5cGV9PnRydWU8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZmFsc2VcIiB7I2ZhbHNlVHlwZX0+ZmFsc2U8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsamUtY29sIHN1Yi1mdWxsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxqZS1pcHRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbGpleyNpZH09XCJ2YWxcIiB2YWx1ZT1cInsjdmFsdWV9XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxqZS1jb2wgc3ViLWljb24gc3ViLWFkZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsamUtYWRkXCIgbGplLWNsaWNrPVwiYWRkXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsamUtY29sIHN1Yi1pY29uIHN1Yi1yZW1vdmVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGplLXJlbW92ZVwiIGxqZS1jbGljaz1cInJlbW92ZVwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGplLWNoaWxkIHsjaXNLZXl9XCIgbGpleyNpZH09XCJjaGlsZFwiPnsjY2hpbGR9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+YC5yZXBsYWNlKC8+XFxzKzwvZywgXCI+PFwiKTtcclxuICAgIFxyXG4gICAgLy8g5oyJ54Wn5pWw5o2u55Sf5oiQ5LiA6KGM5pWw5o2uXHJcbiAgICBmdW5jdGlvbiBnZXRMaW5lU3RyKHR5cGUsIHZhbHVlLCBrZXksIGNoaWxkKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJ4eHh4Pj4+PlwiLCB0eXBlLCB2YWx1ZSwga2V5KTtcclxuICAgICAgICBsZXQgb2JqID0ge1xyXG4gICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICBpZDoga2V5SW5kZXgrK1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGtleSA9PSBcIiNcIikge1xyXG4gICAgICAgICAgICBvYmouaXNSb290ID0gXCJ0aGUtcm9vdFwiO1xyXG4gICAgICAgICAgICBvYmoua2V5ID0gXCJyb290XCI7XHJcbiAgICAgICAgICAgIG9iai5rZXlEaXMgPSBcImRpc2FibGVkXCI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChrZXkpIHtcclxuICAgICAgICAgICAgb2JqLmtleSA9IGtleTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9ialt0eXBlICsgXCJUeXBlXCJdID0gXCJzZWxlY3RlZFwiO1xyXG4gICAgICAgIG9iai5jaGlsZCA9IGNoaWxkO1xyXG5cclxuICAgICAgICBpZiAoW1wibnVtYmVyXCIsIFwic3RyaW5nXCJdLmluZGV4T2YodHlwZSkgPj0gMCkge1xyXG4gICAgICAgICAgICBvYmoudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlID09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgb2JqLmlzS2V5ID0gXCJ0aGUta2V5XCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbGluZVN0cmluZy5yZXBsYWNlKC9cXHtcXCMoXFx3KylcXH0vZywgZnVuY3Rpb24oczAsIHMxKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWwgPSBvYmpbczFdO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsID09PSB1bmRlZmluZWQgPyBcIlwiIDogdmFsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOWwhuaVsOaNrui9rOaNouS4ulVJ55WM6Z2i77yI6YCS5b2S77yJXHJcbiAgICBmdW5jdGlvbiBnZXRIVE1MQnlEYXRhKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICBsZXQgdHlwZSA9IGdldFZhbHVlVHlwZSh2YWx1ZSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codHlwZSwgdmFsdWUpO1xyXG4gICAgICAgIGlmICh0eXBlID09IFwiXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgbGV0IGNoaWxkID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IG4gaW4gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG4sIHZhbHVlW25dKTtcclxuICAgICAgICAgICAgICAgIGNoaWxkLnB1c2goZ2V0SFRNTEJ5RGF0YSh2YWx1ZVtuXSwgbikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGNoaWxkKTtcclxuICAgICAgICAgICAgcmV0dXJuIGdldExpbmVTdHIodHlwZSwgdmFsdWUsIGtleSwgY2hpbGQuam9pbihcIlwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09IFwiYXJyYXlcIikge1xyXG4gICAgICAgICAgICBsZXQgY2hpbGQgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgY2hpbGQucHVzaChnZXRIVE1MQnlEYXRhKHZhbHVlW2ldKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGdldExpbmVTdHIodHlwZSwgdmFsdWUsIGtleSwgY2hpbGQuam9pbihcIlwiKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZ2V0TGluZVN0cih0eXBlLCB2YWx1ZSwga2V5LCBcIlwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDojrflj5bkuIDooYznmoRkb21cclxuICAgIGxldCBkb21DYWNoZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBmdW5jdGlvbiBnZXREb21CeURhdGEodmFsdWUsIGtleSkge1xyXG4gICAgICAgIGRvbUNhY2hlLmlubmVySFRNTCA9IGdldEhUTUxCeURhdGEodmFsdWUsIGtleSk7XHJcbiAgICAgICAgcmV0dXJuIGRvbUNhY2hlLmZpcnN0Q2hpbGQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g6I635Y+W55qE5a6a55qEZG9t5byV55SoXHJcbiAgICBmdW5jdGlvbiBnZXREb21CeUxKRShsaW5lKSB7XHJcbiAgICAgICAgbGV0IGlkID0gXCJsamVcIiArIGxpbmUuZ2V0QXR0cmlidXRlKFwia2V5XCIpO1xyXG4gICAgICAgIGxldCBkb21zID0gbGluZS5xdWVyeVNlbGVjdG9yQWxsKFwiW1wiICsgaWQgKyBcIl1cIik7XHJcbiAgICAgICAgbGV0IGRvbU9iaiA9IHtcclxuICAgICAgICAgICAgJDogbGluZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkb21zLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgIGxldCBkb20gPSBkb21zW2ldO1xyXG4gICAgICAgICAgICBsZXQga2V5ID0gZG9tLmdldEF0dHJpYnV0ZShpZCk7XHJcbiAgICAgICAgICAgIGlmIChrZXkpIHtcclxuICAgICAgICAgICAgICAgIGRvbU9ialtrZXldID0gZG9tO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkb21PYmo7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0RGF0YUJ5TGluZShsaW5lKSB7XHJcbiAgICAgICAgbGV0ICQgPSBnZXREb21CeUxKRShsaW5lKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygkKTtcclxuICAgICAgICBsZXQgdHlwZSA9ICQuc2VsLnZhbHVlO1xyXG4gICAgICAgIGlmICh0eXBlID09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJC52YWwsIDEpXHJcbiAgICAgICAgICAgIGxldCB2YWwgPSB7fTtcclxuICAgICAgICAgICAgJC5jaGlsZC5jaGlsZE5vZGVzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0ubm9kZVR5cGUgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBbdiwga10gPSBnZXREYXRhQnlMaW5lKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwienp6enpcIilcclxuICAgICAgICAgICAgICAgICAgICBpZihrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbFtrXSA9IHY7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIOmcgOimgeWkhOeQhumHjeWkjeWtl+espuS4slxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIFt2YWwsICQua2V5LnZhbHVlLnRyaW0oKV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09IFwiYXJyYXlcIikge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygkLnZhbCwgMilcclxuICAgICAgICAgICAgbGV0IGFyciA9IFtdO1xyXG4gICAgICAgICAgICAkLmNoaWxkLmNoaWxkTm9kZXMuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5ub2RlVHlwZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IFt2XSA9IGdldERhdGFCeUxpbmUoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2godik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gW2FyciwgJC5rZXkudmFsdWUudHJpbSgpXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlID09IFwibnVsbFwiKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCQudmFsLCAzKVxyXG4gICAgICAgICAgICByZXR1cm4gW251bGwsICQua2V5LnZhbHVlLnRyaW0oKV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZSA9PSBcImZhbHNlXCIpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJC52YWwsIDQpXHJcbiAgICAgICAgICAgIHJldHVybiBbZmFsc2UsICQua2V5LnZhbHVlLnRyaW0oKV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZSA9PSBcInRydWVcIikge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygkLnZhbCwgNSlcclxuICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCAkLmtleS52YWx1ZS50cmltKCldO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGUgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygkLCA2KVxyXG4gICAgICAgICAgICByZXR1cm4gWyQudmFsLnZhbHVlLnRyaW0oKSwgJC5rZXkudmFsdWUudHJpbSgpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygkLnZhbCwgNylcclxuICAgICAgICAgICAgcmV0dXJuIFtOdW1iZXIoJC52YWwudmFsdWUucmVwbGFjZSgvXFxXKy9nLCBcIlwiKSkgfHwgMCwgJC5rZXkudmFsdWUudHJpbSgpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFt1bmRlZmluZWQsIFwiXCJdO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBldmVudHMgPSB7XHJcbiAgICAgICAgLy8gc2VsZWN0IGNoYW5nZVxyXG4gICAgICAgIGNoYW5nZShsaW5lLCB0eXBlKSB7XHJcbiAgICAgICAgICAgIGxldCAkID0gZ2V0RG9tQnlMSkUobGluZSk7XHJcbiAgICAgICAgICAgICQuY29scy5jbGFzc05hbWUgPSBcImxqZS1jb2xzIHN1Yi10eXBlLVwiICsgdHlwZTtcclxuICAgICAgICAgICAgJC5jaGlsZC5jbGFzc05hbWUgPSBcImxqZS1jaGlsZFwiICsgKHR5cGUgPT0gXCJvYmplY3RcIiA/IFwiIHRoZS1rZXlcIiA6IFwiXCIpO1xyXG4gICAgICAgICAgICBpZiAodHlwZSA9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAkLnZhbC52YWx1ZSA9ICQudmFsLnZhbHVlLnJlcGxhY2UoL1xcRC9nLCBcIlwiKSB8fCAwO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChbXCJvYmplY3RcIiwgXCJhcnJheVwiXS5pbmRleE9mKHR5cGUpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgJC5jaGlsZC5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyBhZGQg5oyJ6ZKuXHJcbiAgICAgICAgYWRkKGxpbmUpIHtcclxuICAgICAgICAgICAgbGV0ICQgPSBnZXREb21CeUxKRShsaW5lKTtcclxuICAgICAgICAgICAgbGV0IHRoZU5ldyA9IGdldERvbUJ5RGF0YShcIlwiKTtcclxuICAgICAgICAgICAgJC5jaGlsZC5hcHBlbmRDaGlsZCh0aGVOZXcpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8g56e76Zmk5b2T5YmN6KGMXHJcbiAgICAgICAgcmVtb3ZlKGxpbmUpIHtcclxuICAgICAgICAgICAgbGluZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxpbmUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY2xhc3MgSnNvbkVkaXQge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJCA9IHR5cGVvZiBpZCA9PSBcInN0cmluZ1wiID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIDogaWQ7XHJcbiAgICAgICAgICAgIHRoaXMuJC5vbmNoYW5nZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT0gXCJzZWxlY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0eXBlID0gdGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50cy5jaGFuZ2UodGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZSwgdHlwZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuJC5vbmNsaWNrID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgZm4gPSBldmVudHNbdGFyZ2V0LmdldEF0dHJpYnV0ZShcImxqZS1jbGlja1wiKV07XHJcbiAgICAgICAgICAgICAgICBmbiAmJiBmbih0YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gVE9ET1xyXG4gICAgICAgICAgICAvLyDlr7ludW1iZXLnsbvlnovnmoTovpPlhaXlgZrmjqfliLZcclxuICAgICAgICAgICAgLy8gdGhpcy4kLm9ua2V5ZG93biA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICAvLyB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5bCG5pWw5o2u5Lyg5p+TVUlcclxuICAgICAgICByZW5kZXJCeURhdGEoanNvbiA9IHt9KSB7XHJcbiAgICAgICAgICAgIHRoaXMuJC5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz1cImxvY3VzLWpzb24tZWRpdFwiPicgKyBnZXRIVE1MQnlEYXRhKGpzb24sIFwiI1wiKSArIFwiPC9kaXY+XCI7XHJcbiAgICAgICAgICAgIHRoaXMua2V5ID0ga2V5SW5kZXggLSAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g6I635Y+WVUnnvJbovpHlkI7nmoTmlbDmja5cclxuICAgICAgICBnZXREYXRhKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0RGF0YUJ5TGluZSh0aGlzLiQucXVlcnlTZWxlY3RvcignW2tleT1cIicgKyB0aGlzLmtleSArICdcIl0nKSlbMF07XHJcbiAgICAgICAgICAgIC8vIGxldCAkID0gZ2V0RG9tQnlMSkUodGhpcy4kLnF1ZXJ5U2VsZWN0b3IoXCIubGplLWxpbmUgPiAubGplLWNvbHNcIikpXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCQpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBKc29uRWRpdDtcclxufSk7XHJcbiJdfQ==
