"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),_slicedToArray=function(){function e(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var l,a=e[Symbol.iterator]();!(r=(l=a.next()).done)&&(n.push(l.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,t){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.JsonEdit=t()}(window,function(){function e(e){switch(l.call(e).toLowerCase()){case"[object object]":return"object";case"[object array]":return"array";case"[object null]":return"null";case"[object string]":return"string";case"[object number]":return"number";case"[object boolean]":return e?"true":"false"}return""}function t(e,t,n,r){var i={type:e,id:a++};return"#"==n?(i.isRoot="the-root",i.key="root",i.keyDis="disabled"):n&&(i.key=n),i[e+"Type"]="selected",i.child=r,["number","string"].indexOf(e)>=0&&(i.value=t),"object"==e&&(i.isKey="the-key"),c.replace(/\{\#(\w+)\}/g,function(e,t){var n=i[t];return void 0===n?"":n})}function n(r,i){var o=e(r);if(""==o)return"";if("object"==o){var l=[];for(var a in r)l.push(n(r[a],a));return t(o,r,i,l.join(""))}if("array"==o){for(var c=[],u=0;u<r.length;u+=1)c.push(n(r[u]));return t(o,r,i,c.join(""))}return t(o,r,i,"")}function r(e,t){return u.innerHTML=n(e,t),u.firstChild}function i(e){for(var t="lje"+e.getAttribute("key"),n=e.querySelectorAll("["+t+"]"),r={$:e},i=0;i<n.length;i+=1){var o=n[i],l=o.getAttribute(t);l&&(r[l]=o)}return r}function o(e){var t=i(e),n=t.sel.value;if("object"==n){var r={};return t.child.childNodes.forEach(function(e){if(1==e.nodeType){var t=o(e),n=_slicedToArray(t,2),i=n[0],l=n[1];l&&(r[l]=i)}}),[r,t.key.value.trim()]}if("array"==n){var l=[];return t.child.childNodes.forEach(function(e){if(1==e.nodeType){var t=o(e),n=_slicedToArray(t,1),r=n[0];l.push(r)}}),[l,t.key.value.trim()]}return"null"==n?[null,t.key.value.trim()]:"false"==n?[!1,t.key.value.trim()]:"true"==n?[!0,t.key.value.trim()]:"string"==n?[t.val.value.trim(),t.key.value.trim()]:"number"==n?[Number(t.val.value.replace(/\W+/g,""))||0,t.key.value.trim()]:[void 0,""]}var l=Object.prototype.toString,a=10,c='<div class="lje-line {#isRoot}" key="{#id}">\n                        <div class="lje-cols type-{#type}" lje{#id}="cols">\n                            <div class="lje-col key">\n                                <div class="lje-ipt">\n                                    <input type="text" lje{#id}="key" {#keyDis} value="{#key}" />\n                                </div>\n                            </div>\n                            <div class="lje-col icon is">\n                                <div class="lje-is">:</div>\n                            </div>\n                            <div class="lje-col select">\n                                <div class="lje-select">\n                                    <span class="select-c">\n                                        <select lje{#id}="sel">\n                                            <option value="string" {#stringType}>string</option>\n                                            <option value="number" {#numberType}>number</option>\n                                            <option value="object" {#objectType}>object</option>\n                                            <option value="array" {#arrayType}>array</option>\n                                            <option value="null" {#nullType}>null</option>\n                                            <option value="true" {#trueType}>true</option>\n                                            <option value="false" {#falseType}>false</option>\n                                        </select>\n                                    </span>\n                                </div>\n                            </div>\n                            <div class="lje-col full">\n                                <div class="lje-ipt">\n                                    <input type="text" lje{#id}="val" value="{#value}" />\n                                </div>\n                            </div>\n                            <div class="lje-col icon add">\n                                <div class="lje-add" lje-click="add"></div>\n                            </div>\n                            <div class="lje-col icon remove">\n                                <div class="lje-remove" lje-click="remove"></div>\n                            </div>\n                        </div>\n                        <div class="lje-child {#isKey}" lje{#id}="child">{#child}</div>\n                    </div>'.replace(/>\s+</g,"><"),u=document.createElement("div"),s={change:function(e,t){var n=i(e);if(n.cols.className="lje-cols type-"+t,n.child.className="lje-child"+("object"==t?" the-key":""),"number"==t)return void(n.val.value=n.val.value.replace(/\D/g,"")||0);["object","array"].indexOf(t)<0&&(n.child.innerHTML="")},add:function(e){var t=i(e),n=r("");t.child.appendChild(n)},remove:function(e){e.parentNode.removeChild(e)}};return function(){function e(t){_classCallCheck(this,e),this.$="string"==typeof t?document.getElementById(t):t,this.$.onchange=function(e){var t=e.target;if("select"==t.tagName.toLowerCase()){var n=t.value;s.change(t.parentNode.parentNode.parentNode.parentNode.parentNode,n)}},this.$.onclick=function(e){var t=e.target,n=s[t.getAttribute("lje-click")];n&&n(t.parentNode.parentNode.parentNode)}}return _createClass(e,[{key:"renderByData",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.$.innerHTML='<div class="locus-json-edit">'+n(e,"#")+"</div>",this.key=a-1}},{key:"getData",value:function(){return o(this.$.querySelector('[key="'+this.key+'"]'))[0]}}]),e}()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
